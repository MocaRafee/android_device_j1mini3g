diff --git a/include/gui/ISurfaceComposerClient.h b/include/gui/ISurfaceComposerClient.h
index d3e8b8b..bb6fe44 100644
--- a/include/gui/ISurfaceComposerClient.h
+++ b/include/gui/ISurfaceComposerClient.h
@@ -52,6 +52,7 @@ public:
         eFXSurfaceNormal    = 0x00000000,
         eFXSurfaceBlur      = 0x00010000,
         eFXSurfaceDim       = 0x00020000,
+	eFXSurfaceHWAcc     = 0x00100000,
         eFXSurfaceMask      = 0x000F0000,
     };
 
diff --git a/include/media/openmax/OMX_Audio.h b/include/media/openmax/OMX_Audio.h
index a0cbd3b..de3a8a2 100644
--- a/include/media/openmax/OMX_Audio.h
+++ b/include/media/openmax/OMX_Audio.h
@@ -108,6 +108,7 @@ typedef enum OMX_AUDIO_CODINGTYPE {
     OMX_AUDIO_CodingFLAC,        /**< Any variant of FLAC encoded data */
     OMX_AUDIO_CodingKhronosExtensions = 0x6F000000, /**< Reserved region for introducing Khronos Standard Extensions */
     OMX_AUDIO_CodingVendorStartUnused = 0x7F000000, /**< Reserved region for introducing Vendor Extensions */
+    OMX_AUDIO_CodingIMAADPCM,    /**< Any variant of IMAADPCM encoded data */
     OMX_AUDIO_CodingMax = 0x7FFFFFFF
 } OMX_AUDIO_CODINGTYPE;
 
@@ -469,6 +470,20 @@ typedef struct OMX_AUDIO_PARAM_ADPCMTYPE {
                                     variable or unknown sampling rate. */
 } OMX_AUDIO_PARAM_ADPCMTYPE;
 
+/** IMAADPCM stream format parameters */
+typedef struct OMX_AUDIO_PARAM_IMAADPCMTYPE {
+    OMX_U32 nSize;              /**< size of the structure in bytes */
+    OMX_VERSIONTYPE nVersion;   /**< OMX specification version information */
+    OMX_U32 nPortIndex;         /**< port that this structure applies to */
+    OMX_U32 nChannels;          /**< Number of channels in the data stream (not
+                                     necessarily the same as the number of channels
+                                     to be rendered. */
+    OMX_U32 nBitsPerSample;     /**< Number of bits in each sample */
+    OMX_U32 nSampleRate;        /**< Sampling rate of the source data.  Use 0 for
+                                    variable or unknown sampling rate. */
+    OMX_U32 nBlockAlign;        /**< Sampling rate of the source data.	Use 0 for
+                                    variable or unknown sampling rate. */
+} OMX_AUDIO_PARAM_IMAADPCMTYPE;
 
 /** G723 rate */
 typedef enum OMX_AUDIO_G723RATE {
diff --git a/include/media/openmax/OMX_IVCommon.h b/include/media/openmax/OMX_IVCommon.h
index f9b6f4b..4934a2e 100644
--- a/include/media/openmax/OMX_IVCommon.h
+++ b/include/media/openmax/OMX_IVCommon.h
@@ -170,6 +170,7 @@ typedef enum OMX_COLOR_FORMATTYPE {
     OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka = 0x7FA30C03,
     OMX_SEC_COLOR_FormatNV12Tiled = 0x7FC00002,
     OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar32m = 0x7FA30C04,
+    OMX_SPRD_COLOR_FormatYVU420SemiPlanar = 0x7FD00001,
     OMX_COLOR_FormatMax = 0x7FFFFFFF
 } OMX_COLOR_FORMATTYPE;
 
diff --git a/include/media/openmax/OMX_Index.h b/include/media/openmax/OMX_Index.h
index 1a2a548..b3ba3c7 100644
--- a/include/media/openmax/OMX_Index.h
+++ b/include/media/openmax/OMX_Index.h
@@ -194,7 +194,7 @@ typedef enum OMX_INDEXTYPE {
     OMX_IndexParamVideoSliceFMO,            /**< reference: OMX_VIDEO_PARAM_AVCSLICEFMO */
     OMX_IndexConfigVideoAVCIntraPeriod,     /**< reference: OMX_VIDEO_CONFIG_AVCINTRAPERIOD */
     OMX_IndexConfigVideoNalSize,            /**< reference: OMX_VIDEO_CONFIG_NALSIZE */
-
+    OMX_IndexConfigEncSceneMode,
     /* Image & Video common Configurations */
     OMX_IndexCommonStartUnused = 0x07000000,
     OMX_IndexParamCommonDeblocking,         /**< reference: OMX_PARAM_DEBLOCKINGTYPE */
@@ -262,6 +262,7 @@ typedef enum OMX_INDEXTYPE {
        private indexes are not guaranteed unique and therefore should
        only be sent to the appropriate component. */
 
+    OMX_IndexParamAudioImaAdpcm = 0x7FA7B09C,/**< reference: OMX_AUDIO_PARAM_IMAADPCMTYPE */
     OMX_IndexMax = 0x7FFFFFFF
 
 } OMX_INDEXTYPE;
diff --git a/include/media/openmax/OMX_Video.h b/include/media/openmax/OMX_Video.h
index decc410..74cf2a3 100644
--- a/include/media/openmax/OMX_Video.h
+++ b/include/media/openmax/OMX_Video.h
@@ -956,6 +956,23 @@ typedef struct OMX_VIDEO_CONFIG_BITRATETYPE {
 } OMX_VIDEO_CONFIG_BITRATETYPE;
 
 /**
+ * Defines Encoder Scene Mode setting
+ *
+ * STRUCT MEMBERS:
+ *  nSize            : Size of the structure in bytes
+ *  nVersion         : OMX specification version information
+ *  nPortIndex       : Port that this structure applies to
+ *  nMode : Encoding scene mode(1:Volte, 2:Wfd, 0:Normal)
+ */
+
+typedef struct OMX_VIDEO_CONFIG_ENCODERSCENEMODE {
+    OMX_U32 nSize;
+    OMX_VERSIONTYPE nVersion;
+    OMX_U32 nPortIndex;
+    OMX_U32 nMode;
+} OMX_VIDEO_CONFIG_ENCODERSCENEMODE;
+
+/**
  * Defines Encoder Frame Rate setting
  *
  * STRUCT MEMBERS:
diff --git a/include/ui/GraphicBuffer.h b/include/ui/GraphicBuffer.h
index 3da720f..b1557c3 100644
--- a/include/ui/GraphicBuffer.h
+++ b/include/ui/GraphicBuffer.h
@@ -67,6 +67,7 @@ public:
         USAGE_HW_MASK           = GRALLOC_USAGE_HW_MASK,
 
         USAGE_CURSOR            = GRALLOC_USAGE_CURSOR,
+	USAGE_HW_TILE_ALIGN     = GRALLOC_USAGE_HW_TILE_ALIGN,
     };
 
     GraphicBuffer();
diff --git a/libs/binder/IPCThreadState.cpp b/libs/binder/IPCThreadState.cpp
index af18e11..8fcc8a6 100644
--- a/libs/binder/IPCThreadState.cpp
+++ b/libs/binder/IPCThreadState.cpp
@@ -1148,6 +1148,12 @@ status_t IPCThreadState::executeCommand(int32_t cmd)
         mProcess->spawnPooledThread(false);
         break;
         
+    // SPRD: Sometimes, doing binder operation in destructor could reveiving BR_TRANSACTION_COMPLETE here.
+    //       We handle this command simply and avoid crash.
+    case BR_TRANSACTION_COMPLETE:
+        ALOGE("*** BAD COMMAND: BR_TRANSACTION_COMPLETE(%x) for executeCommand from Binder driver\n", cmd);
+        break;
+
     default:
         printf("*** BAD COMMAND %d received from Binder driver\n", cmd);
         result = UNKNOWN_ERROR;
diff --git a/services/surfaceflinger/Android.mk b/services/surfaceflinger/Android.mk
index 25fa503..063e77f 100644
--- a/services/surfaceflinger/Android.mk
+++ b/services/surfaceflinger/Android.mk
@@ -95,6 +95,10 @@ else
     LOCAL_CFLAGS += -DMAX_VIRTUAL_DISPLAY_DIMENSION=0
 endif
 
+ifeq ($(strip $(TARGET_GPU_NOT_SUPPORT_NV12_OUTPUT)),true)
+    LOCAL_CFLAGS += -DGPU_NOT_SUPPORT_NV12_OUTPUT
+endif
+
 ifeq ($(BOARD_USE_BGRA_8888),true)
     LOCAL_CFLAGS += -DUSE_BGRA_8888
 endif
diff --git a/services/surfaceflinger/DisplayDevice.cpp b/services/surfaceflinger/DisplayDevice.cpp
index b83149b..9a43665 100644
--- a/services/surfaceflinger/DisplayDevice.cpp
+++ b/services/surfaceflinger/DisplayDevice.cpp
@@ -102,7 +102,33 @@ DisplayDevice::DisplayDevice(
     if (config == EGL_NO_CONFIG) {
         config = RenderEngine::chooseEglConfig(display, format);
     }
-    eglSurface = eglCreateWindowSurface(display, config, window, NULL);
+    
+    /*
+     *  Sprd change here:
+     *  Enable EGL NV12 config for GPU output NV12 image, for
+     *  VirtualDisplay.
+     * */
+#ifndef GPU_NOT_SUPPORT_NV12_OUTPUT
+    if (mType >= DisplayDevice::DISPLAY_VIRTUAL)
+    {
+        EGLConfig nv12Config;
+        EGLint numConfigs = 0;
+        static EGLint sDefaultConfigAttribs[] = {
+            EGL_CONFIG_ID, 43, EGL_NONE };
+        eglChooseConfig(display, sDefaultConfigAttribs, &nv12Config, 1, &numConfigs);
+        eglSurface = eglCreateWindowSurface(display, nv12Config, window, NULL);
+
+        /*
+         * Sync Framebuffer format to VirtualDisplay Surface.
+         * */
+        format = mDisplaySurface->getFBFormat();
+        native_window_set_buffers_format(window, format);
+    }
+    else
+#endif
+    {
+        eglSurface = eglCreateWindowSurface(display, config, window, NULL);
+    }
     eglQuerySurface(display, eglSurface, EGL_WIDTH,  &mDisplayWidth);
     eglQuerySurface(display, eglSurface, EGL_HEIGHT, &mDisplayHeight);
 
@@ -148,7 +174,7 @@ DisplayDevice::DisplayDevice(
     mPanelMountFlip = atoi(property);
 
     // initialize the display orientation transform.
-    setProjection(DisplayState::eOrientationDefault, mViewport, mFrame);
+    setDisplayDevice();
 
 #ifdef NUM_FRAMEBUFFER_SURFACE_BUFFERS
     surface->allocateBuffers();
@@ -304,11 +330,65 @@ EGLBoolean DisplayDevice::makeCurrent(EGLDisplay dpy, EGLContext ctx) const {
 void DisplayDevice::setViewportAndProjection() const {
     size_t w = mDisplayWidth;
     size_t h = mDisplayHeight;
+    char property[PROPERTY_VALUE_MAX];
+    if ((mType == DisplayDevice::DISPLAY_PRIMARY)
+        && (property_get("ro.sf.hwrotation", property, NULL) > 0)) {
+        //displayOrientation
+        switch (atoi(property)) {
+            case 90:
+            case 270:
+            w = mDisplayHeight;
+            h = mDisplayWidth;
+            break;
+            default:
+            break;
+        }
+    }
     Rect sourceCrop(0, 0, w, h);
     mFlinger->getRenderEngine().setViewportAndProjection(w, h, sourceCrop, h,
         false, Transform::ROT_0);
 }
 
+void DisplayDevice::setDisplayDevice()
+{
+	// initialize the display orientation transform.
+	// it's a constant that should come from the display driver.
+	int displayOrientation = DisplayState::eOrientationDefault;
+	char property[PROPERTY_VALUE_MAX];
+	if ((mType == DisplayDevice::DISPLAY_PRIMARY)
+           && (property_get("ro.sf.hwrotation", property, NULL) > 0)) {
+		//displayOrientation
+		switch (atoi(property)) {
+			case 90:
+			displayOrientation = DisplayState::eOrientation90;
+			break;
+
+			case 180:
+			displayOrientation = DisplayState::eOrientation180;
+			break;
+
+			case 270:
+			displayOrientation = DisplayState::eOrientation270;
+			break;
+		}
+	}
+
+	const int w = mDisplayWidth;
+	const int h = mDisplayHeight;
+	DisplayDevice::orientationToTransfrom(displayOrientation, w, h,
+	&mDisplayTransform);
+	if (displayOrientation & DisplayState::eOrientationSwapMask) {
+		mDisplayWidth = h;
+		mDisplayHeight = w;
+	} else {
+		mDisplayWidth = w;
+		mDisplayHeight = h;
+	}
+
+	// initialize the display orientation transform.
+	setProjection(DisplayState::eOrientationDefault, mViewport, mFrame);
+}
+
 // ----------------------------------------------------------------------------
 
 void DisplayDevice::setVisibleLayersSortedByZ(const Vector< sp<Layer> >& layers) {
@@ -518,7 +598,8 @@ void DisplayDevice::setProjection(int orientation,
     // The viewport and frame are both in the logical orientation.
     // Apply the logical translation, scale to physical size, apply the
     // physical translation and finally rotate to the physical orientation.
-    mGlobalTransform = R * TP * S * TL;
+    mGlobalTransform = mDisplayTransform * R * TP * S * TL;
+    mOriginalTransform = R * TP * S * TL;
 
     const uint8_t type = mGlobalTransform.getType();
     mNeedsFiltering = (!mGlobalTransform.preserveRects() ||
diff --git a/services/surfaceflinger/DisplayDevice.h b/services/surfaceflinger/DisplayDevice.h
index 9023ce9..6f976d5 100644
--- a/services/surfaceflinger/DisplayDevice.h
+++ b/services/surfaceflinger/DisplayDevice.h
@@ -116,6 +116,7 @@ public:
     int                     getOrientation() const { return mOrientation; }
     uint32_t                getOrientationTransform() const;
     const Transform&        getTransform() const { return mGlobalTransform; }
+    const Transform&        getOriginalTransform() const { return mOriginalTransform; }
     const Rect              getViewport() const { return mViewport; }
     const Rect              getFrame() const { return mFrame; }
     const Rect&             getScissor() const { return mScissor; }
@@ -216,6 +217,7 @@ private:
     status_t orientationToTransfrom(int orientation,
             int w, int h, Transform* tr);
 
+    void setDisplayDevice();
     uint32_t mLayerStack;
     int mOrientation;
     // user-provided visible area of the layer stack
@@ -225,6 +227,8 @@ private:
     // pre-computed scissor to apply to the display
     Rect mScissor;
     Transform mGlobalTransform;
+    Transform mOriginalTransform;
+    Transform mDisplayTransform;
     bool mNeedsFiltering;
     // Current power mode
     int mPowerMode;
diff --git a/services/surfaceflinger/DisplayHardware/DisplaySurface.h b/services/surfaceflinger/DisplayHardware/DisplaySurface.h
index 2f743c1..39b4af5 100644
--- a/services/surfaceflinger/DisplayHardware/DisplaySurface.h
+++ b/services/surfaceflinger/DisplayHardware/DisplaySurface.h
@@ -74,8 +74,16 @@ public:
 
     virtual void resizeBuffers(const uint32_t w, const uint32_t h) = 0;
 
+    inline int getFBFormat() const
+    {
+        return mFBFormat;
+    }
+
 protected:
-    DisplaySurface() {}
+    int mFBFormat;
+    DisplaySurface()
+    : mFBFormat(HAL_PIXEL_FORMAT_RGBA_8888)
+    {}
     virtual ~DisplaySurface() {}
 };
 
diff --git a/services/surfaceflinger/DisplayHardware/HWComposer.cpp b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
index 17e91d9..07fbac1 100644
--- a/services/surfaceflinger/DisplayHardware/HWComposer.cpp
+++ b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
@@ -91,7 +91,8 @@ HWComposer::HWComposer(
       mFbDev(0), mHwc(0), mNumDisplays(1),
       mCBContext(new cb_context),
       mEventHandler(handler),
-      mDebugForceFakeVSync(false)
+      mDebugForceFakeVSync(false),
+      mBuiltInDisplayNum(NUM_BUILTIN_DISPLAYS)
 {
     for (size_t i =0 ; i<MAX_HWC_DISPLAYS ; i++) {
         mLists[i] = 0;
@@ -147,6 +148,7 @@ HWComposer::HWComposer(
                 mCBContext->procs.hotplug = NULL;
             memset(mCBContext->procs.zero, 0, sizeof(mCBContext->procs.zero));
             mHwc->registerProcs(mHwc, &mCBContext->procs);
+            mHwc->getBuiltInDisplayNum(mHwc, &mBuiltInDisplayNum);
         }
 
         // don't need a vsync thread if we have a hardware composer
@@ -184,7 +186,7 @@ HWComposer::HWComposer(
         disp.currentConfig = 0;
     } else if (mHwc) {
         // here we're guaranteed to have at least HWC 1.1
-        for (size_t i =0 ; i<NUM_BUILTIN_DISPLAYS ; i++) {
+        for (size_t i =0 ; i<mBuiltInDisplayNum ; i++) {
             queryDisplayProperties(i);
         }
     }
diff --git a/services/surfaceflinger/DisplayHardware/HWComposer.h b/services/surfaceflinger/DisplayHardware/HWComposer.h
index efdcd03..cb412ad 100644
--- a/services/surfaceflinger/DisplayHardware/HWComposer.h
+++ b/services/surfaceflinger/DisplayHardware/HWComposer.h
@@ -153,6 +153,14 @@ public:
     status_t setCursorPositionAsync(int32_t id, const Rect &pos);
 
     /*
+     *  return the number of physical display screen vendor supported.
+     * */
+    inline uint32_t getBuiltInDisplayNum() const
+    {
+        return mBuiltInDisplayNum;
+    }
+
+    /*
      * Interface to hardware composer's layers functionality.
      * This abstracts the HAL interface to layers which can evolve in
      * incompatible ways from one release to another.
@@ -391,6 +399,11 @@ private:
     mutable Mutex mEventControlLock;
 
     int mDimComp;
+
+    /*
+     *  the number of physical screen verdor supported.
+     * */
+    uint32_t mBuiltInDisplayNum;
 };
 
 // ---------------------------------------------------------------------------
diff --git a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
index 5fd2136..cff37c2 100644
--- a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
+++ b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
@@ -83,6 +83,7 @@ VirtualDisplaySurface::VirtualDisplaySurface(HWComposer& hwc, int32_t dispId,
     // with GLES. If the consumer needs CPU access, use the default format
     // set by the consumer. Otherwise allow gralloc to decide the format based
     // on usage bits.
+#if 0
     int sinkUsage;
     sink->query(NATIVE_WINDOW_CONSUMER_USAGE_BITS, &sinkUsage);
     if (sinkUsage & (GRALLOC_USAGE_SW_READ_MASK | GRALLOC_USAGE_SW_WRITE_MASK)) {
@@ -92,7 +93,22 @@ VirtualDisplaySurface::VirtualDisplaySurface(HWComposer& hwc, int32_t dispId,
     } else {
         mDefaultOutputFormat = HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED;
     }
+#else
+    int sinkFormat;
+    sink->query(NATIVE_WINDOW_FORMAT, &sinkFormat);
+    mDefaultOutputFormat = sinkFormat;
+#endif
     mOutputFormat = mDefaultOutputFormat;
+    if (sForceHwcCopy)
+    {
+        int scratchFormat;
+        bqProducer->query(NATIVE_WINDOW_FORMAT, &scratchFormat);
+        mFBFormat = scratchFormat;
+    }
+    else
+    {
+        mFBFormat = mDefaultOutputFormat;
+    }
 
     ConsumerBase::mName = String8::format("VDS: %s", mDisplayName.string());
     mConsumer->setConsumerName(ConsumerBase::mName);
diff --git a/services/surfaceflinger/Layer.cpp b/services/surfaceflinger/Layer.cpp
index 6a9cdb7..0de9e35 100644
--- a/services/surfaceflinger/Layer.cpp
+++ b/services/surfaceflinger/Layer.cpp
@@ -85,7 +85,8 @@ Layer::Layer(SurfaceFlinger* flinger, const sp<Client>& client,
         mQueueItems(),
         mLastFrameNumberReceived(0),
         mUpdateTexImageFailed(false),
-        mTransformHint(0)
+        mTransformHint(0),
+        mCaptureScreen(false)
 {
     mCurrentCrop.makeInvalid();
     mFlinger->getRenderEngine().genTextures(1, &mTextureName);
@@ -249,6 +250,12 @@ const String8& Layer::getName() const {
 status_t Layer::setBuffers( uint32_t w, uint32_t h,
                             PixelFormat format, uint32_t flags)
 {
+    uint32_t usage = getEffectiveUsage(0);
+    if (flags & ISurfaceComposerClient::eFXSurfaceHWAcc)
+    {
+        usage |= GraphicBuffer::USAGE_HW_TILE_ALIGN;
+    }
+
     uint32_t const maxSurfaceDims = min(
             mFlinger->getMaxTextureSize(), mFlinger->getMaxViewportDims());
 
@@ -267,7 +274,7 @@ status_t Layer::setBuffers( uint32_t w, uint32_t h,
 
     mSurfaceFlingerConsumer->setDefaultBufferSize(w, h);
     mSurfaceFlingerConsumer->setDefaultBufferFormat(format);
-    mSurfaceFlingerConsumer->setConsumerUsageBits(getEffectiveUsage(0));
+    mSurfaceFlingerConsumer->setConsumerUsageBits(usage);
 
     return NO_ERROR;
 }
@@ -503,6 +510,7 @@ void Layer::setGeometry(
     }
     Rect frame(s.transform.transform(computeBounds(activeTransparentRegion)));
     frame.intersect(hw->getViewport(), &frame);
+    //const Transform& tr(hw->getOriginalTransform());
     const Transform& tr(hw->getTransform());
     layer.setFrame(tr.transform(frame));
     setPosition(hw, layer, s);
@@ -560,7 +568,7 @@ void Layer::setPerFrameData(const sp<const DisplayDevice>& hw,
     // after HWComposer::commit() -- every frame.
     // Apply this display's projection's viewport to the visible region
     // before giving it to the HWC HAL.
-    const Transform& tr = hw->getTransform();
+    const Transform& tr = hw->getOriginalTransform();
     Region visible = tr.transform(visibleRegion.intersect(hw->getViewport()));
     layer.setVisibleRegionScreen(visible);
     layer.setSurfaceDamage(surfaceDamageRegion);
@@ -814,6 +822,10 @@ bool Layer::getFiltering() const {
     return mFiltering;
 }
 
+void Layer::setCaptureScreen(bool captureScreen) {
+	mCaptureScreen = captureScreen;
+}
+
 // As documented in libhardware header, formats in the range
 // 0x100 - 0x1FF are specific to the HAL implementation, and
 // are known to have no alpha channel
@@ -844,7 +856,25 @@ void Layer::computeGeometry(const sp<const DisplayDevice>& hw, Mesh& mesh,
     const Layer::State& s(getDrawingState());
     Transform tr(useIdentityTransform ?
             hw->getTransform() : hw->getTransform() * s.transform);
-    const uint32_t hw_h = hw->getHeight();
+    uint32_t hw_h = hw->getHeight();
+	char property[PROPERTY_VALUE_MAX];
+    if ((hw->getDisplayType() == DisplayDevice::DISPLAY_PRIMARY)
+        && (property_get("ro.sf.hwrotation", property, NULL) > 0)) {
+        if (mCaptureScreen) {
+            tr = hw->getOriginalTransform() * s.transform;
+        } else {
+            //displayOrientation
+            switch (atoi(property)) {
+                case 90:
+                case 270:
+                hw_h = hw->getWidth();
+                break;
+                default:
+                break;
+            }
+        }
+    }
+
     Rect win(s.active.w, s.active.h);
     if (!s.active.crop.isEmpty()) {
         win.intersect(s.active.crop, &win);
diff --git a/services/surfaceflinger/Layer.h b/services/surfaceflinger/Layer.h
index 0d6ec41..09cbe7a 100644
--- a/services/surfaceflinger/Layer.h
+++ b/services/surfaceflinger/Layer.h
@@ -341,6 +341,7 @@ public:
     void clearWithOpenGL(const sp<const DisplayDevice>& hw, const Region& clip) const;
     void setFiltering(bool filtering);
     bool getFiltering() const;
+    void setCaptureScreen(bool captureScreen);
 
     // only for debugging
     inline const sp<GraphicBuffer>& getActiveBuffer() const { return mActiveBuffer; }
@@ -466,6 +467,7 @@ private:
     uint64_t mLastFrameNumberReceived;
     bool mUpdateTexImageFailed; // This is only modified from the main thread
     uint32_t mTransformHint;
+    bool mCaptureScreen;
 };
 
 // ---------------------------------------------------------------------------
diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 941257c..cc9fb0c 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -464,6 +464,7 @@ void SurfaceFlinger::init() {
     ALOGI(  "SurfaceFlinger's main thread ready to run. "
             "Initializing graphics H/W...");
 
+    uint32_t builtInDisplayNum = DisplayDevice::NUM_BUILTIN_DISPLAY_TYPES;
     Mutex::Autolock _l(mStateLock);
 
     // initialize EGL for the default display
@@ -499,9 +500,13 @@ void SurfaceFlinger::init() {
 
     LOG_ALWAYS_FATAL_IF(mEGLContext == EGL_NO_CONTEXT,
             "couldn't create EGLContext");
-
+    builtInDisplayNum = mHwc->getBuiltInDisplayNum();
+    if (builtInDisplayNum > DisplayDevice::NUM_BUILTIN_DISPLAY_TYPES)
+    {
+        builtInDisplayNum = DisplayDevice::NUM_BUILTIN_DISPLAY_TYPES;
+    }
     // initialize our non-virtual displays
-    for (size_t i=0 ; i<DisplayDevice::NUM_BUILTIN_DISPLAY_TYPES ; i++) {
+    for (size_t i=0 ; i<builtInDisplayNum ; i++) {
         DisplayDevice::DisplayType type((DisplayDevice::DisplayType)i);
         // set-up the displays that are already connected
         if (mHwc->isConnected(i) || type==DisplayDevice::DISPLAY_PRIMARY) {
@@ -678,6 +683,20 @@ status_t SurfaceFlinger::getDisplayConfigs(const sp<IBinder>& display,
         else {
             info.w = hwConfig.width;
             info.h = hwConfig.height;
+            char property[PROPERTY_VALUE_MAX];
+            if ((type == DisplayDevice::DISPLAY_PRIMARY)
+                && (property_get("ro.sf.hwrotation", property, NULL) > 0)) {
+                //displayOrientation
+                switch (atoi(property)) {
+                    case 90:
+                    case 270:
+                    info.w = hwConfig.height;
+                    info.h = hwConfig.width;
+                    break;
+                    default:
+                    break;
+                }
+            }
             info.xdpi = xdpi;
             info.ydpi = ydpi;
         }
@@ -1152,7 +1171,7 @@ void SurfaceFlinger::rebuildLayerStacks() {
             Region dirtyRegion;
             Vector< sp<Layer> > layersSortedByZ;
             const sp<DisplayDevice>& hw(mDisplays[dpy]);
-            const Transform& tr(hw->getTransform());
+            const Transform& tr(hw->getOriginalTransform());
             const Rect bounds(hw->getBounds());
             if (hw->isDisplayOn()) {
                 computeVisibleRegions(hw->getHwcDisplayId(), layers,
@@ -2096,7 +2115,10 @@ bool SurfaceFlinger::doComposeSurfaces(const sp<const DisplayDevice>& hw, const
 
     const Vector< sp<Layer> >& layers(hw->getVisibleLayersSortedByZ());
     const size_t count = layers.size();
-    const Transform& tr = hw->getTransform();
+    const Transform& tr = hw->getOriginalTransform();
+#if defined(LAYER_DUMP_BMP)
+    //layer_count = 0;
+#endif
     if (cur != end) {
         // we're using h/w composer
         for (size_t i=0 ; i<count && cur!=end ; ++i, ++cur) {
@@ -2118,6 +2140,9 @@ bool SurfaceFlinger::doComposeSurfaces(const sp<const DisplayDevice>& hw, const
                         break;
                     }
                     case HWC_FRAMEBUFFER: {
+                        #if defined(LAYER_DUMP_BMP)
+                        //layer_count++;
+                        #endif
                         layer->draw(hw, clip);
                         break;
                     }
@@ -3522,7 +3547,9 @@ void SurfaceFlinger::renderScreenImplLocked(
             if (state.z >= minLayerZ && state.z <= maxLayerZ) {
                 if (canDrawLayerinScreenShot(hw,layer)) {
                     if (filtering) layer->setFiltering(true);
+                    layer->setCaptureScreen(true);
                     layer->draw(hw, useIdentityTransform);
+                    layer->setCaptureScreen(false);
                     if (filtering) layer->setFiltering(false);
                 }
             }
